// <auto-generated />
using System;
using System.Net;
using DxRating.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DxRating.Database.Migrations
{
    [DbContext(typeof(DxDbContext))]
    partial class DxDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DxRating.Domain.Entities.Identity.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTimeOffset>("AccessTokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("access_token_expires_at");

                    b.Property<IPAddress>("IpAddress")
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTimeOffset>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expires_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AccessToken");

                    b.HasIndex("AccessTokenExpiresAt");

                    b.HasIndex("RefreshToken");

                    b.HasIndex("RefreshTokenExpiresAt");

                    b.HasIndex("UserId");

                    b.ToTable("session");
                });

            modelBuilder.Entity("DxRating.Domain.Entities.Identity.SocialLogin", b =>
                {
                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("connection_id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ConnectionId");

                    b.HasIndex("UserId");

                    b.HasIndex("Platform", "Identifier");

                    b.ToTable("social_login");
                });

            modelBuilder.Entity("DxRating.Domain.Entities.Identity.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "expires_at");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "token_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.Property<string>("VerificationToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "verification_token");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("UserId");

                    b.HasIndex("VerificationToken");

                    b.ToTable("token");
                });

            modelBuilder.Entity("DxRating.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<DateTimeOffset>("EmailConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_confirmed_at");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("UserId");

                    b.HasIndex("Email");

                    b.ToTable("user");
                });

            modelBuilder.Entity("DxRating.Domain.Entities.Identity.Session", b =>
                {
                    b.HasOne("DxRating.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DxRating.Domain.Entities.Identity.SocialLogin", b =>
                {
                    b.HasOne("DxRating.Domain.Entities.Identity.User", "User")
                        .WithMany("SocialLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DxRating.Domain.Entities.Identity.Token", b =>
                {
                    b.HasOne("DxRating.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DxRating.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("SocialLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
